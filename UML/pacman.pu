@startuml pacman

skinparam Shadowing false
skinparam classAttributeIconSize 0

GameObject <|-- Character
GameObject <|-- Item
Character <|-- Pacman
InputInterface <|.. KeyboardInput
InputInterface <|.. ArcadeInput
Character <|-- Monster
Monster <|-- Akabei
Monster <|-- Pinky
Monster <|-- Aosuke
Monster <|-- Guzuta
Stage o-- Pacman
Stage o-- Monster
Stage o-- Map
Stage o-- InputInterface
Map o-- Item
Map o-- MapObject

abstract class GameObject {
    # position: PVector
    # size: PVector
    # exist: boolean

    # GameObject(position: PVector, size: PVector): 
    + getPosition(): PVector
    + getExist(): boolean
    + getMinPosition(): PVector
    + getMaxPosition(): PVector
    + isColliding(object: GameObject): boolean
    + disappear()
    + {abstract} draw()
}

abstract class Character {
    # direction: int
    # speed: float

    # images: PImage[][]
    # curAnimation: int
    # animetionNum: int
    # interval: int
    # intervalLeft: int

    # Character(position: PVector, direction: int, speed: float, characterName: String, interval: int)
    + getDirection(): int
    + getSpeed(): int
    + setSpeed(speed: float)
    # getDirectionVector(int direction)
    + move(map: Map)
    + canMove(map: Map, direction: int): boolean
    + draw()
}

class Pacman {
    # nextDirection: int

    + Pacman(position: PVector, direction: int, speed: float, characterName: String, interval: int)
    + getNextDirection(): int
    + setNextDirection(nextDirection: int)
    + decideDirection(map: Map)
}

abstract class Monster {
    # ijike: boolean

    # Monster(position: PVector, direction: int, speed: float, characterName: String, interval: int)
    + getIjike(): boolen
    + setIjike(ijike: boolean)
    + {abstract} decideDirection(map: Map, pacman: Pacman)
}

class Akabei {
    + Akabei(position: PVector, direction: int, speed: float, characterName: String, interval: int)
    + decideDirection(map: Map, pacman: Pacman)
}

class Pinky {
    + Pinky(position: PVector, direction: int, speed: float, characterName: String, interval: int)
    + decideDirection(map: Map, pacman: Pacman)
}

class Aosuke {
    + Aosuke(position: PVector, direction: int, speed: float, characterName: String, interval: int)
    + decideDirection(map: Map, pacman: Pacman)
}

class Guzuta {
    + Guzuta(position: PVector, direction: int, speed: float, characterName: String, interval: int)
    + decideDirection(map: Map, pacman: Pacman)
}

class Stage {
    # pacman: Pacman
    # monsters: ArrayList<Monster>
    # map: Map
    # input: InputInterface
    # score: int

    + Stage(mapName: String, input: InputInterface)
    + getScore(): int
    + setScore(score: int)
    + update()
    + draw()
}

class Map {
    # objects: MapObject[][]
    # foods: ArrayList<Item>
    # powerFoods: ArrayList<Item>
    # pacmanPosition: PVector
    # enemyPositions: ArrayList<PVector>
    # image: PImage
    # size: PVector

    + Map(mapName: String)
    + getObject(x: int, y: int): MapObject
    + draw()
}

class Item {
    # images: PImage[]
    # curAnimation: int
    # animetionNum: int
    # interval: int
    # intervalLeft: int

    + Item(position: PVector, imageName: String, interval: int)
    + draw()
}

enum MapObject {
    Wall
    Route
    EnemyBase
    EnemyDoor
}

interface InputInterface {
    + {abstract} right(): boolean
    + {abstract} up(): boolean
    + {abstract} left(): boolean
    + {abstract} down(): boolean
    + {abstract} buttonA(): boolean
    + {abstract} buttonB(): boolean
}

class KeyboardInput {
    + right(): boolean
    + up(): boolean
    + left(): boolean
    + down(): boolean
    + buttonA(): boolean
    + buttonB(): boolean
}

class ArcadeInput {
    + right(): boolean
    + up(): boolean
    + left(): boolean
    + down(): boolean
    + buttonA(): boolean
    + buttonB(): boolean
}

@enduml
