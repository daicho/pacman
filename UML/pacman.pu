@startuml pacman

skinparam Shadowing false
skinparam classAttributeIconSize 0

GameObject <|-- Character
GameObject <|-- Item

Character <|-- Pacman
Character <|-- Monster
Character o-- Animation

Monster <|-- Akabei
Monster <|-- Pinky
Monster <|-- Aosuke
Monster <|-- Guzuta
Monster o-- MonsterStatus
Monster o-- MonsterMode

Map o-- Item
Map o-- MapObject

Item o-- Animation

SceneMaganer o-- Scene
Scene <|.. Title
Scene <|.. Stage
Scene <|.. Result

Stage o-- Pacman
Stage o-- Monster
Stage o-- Map

Input o-- InputInterface
InputInterface <|-- KeyboardInput
InputInterface <|-- ArcadeInput

abstract class GameObject {
    # position: PVector
    # size: PVector

    # GameObject(position: PVector):
    + getPosition(): PVector
    + setPosition(position: PVector)
    + getSize(): PVector
    + getMinPosition(): PVector
    + getMaxPosition(): PVector
    + isColliding(object: GameObject): boolean
    + {abstract} draw()
}

abstract class Character {
    # direction: int
    # speed: float
    # animetions: Animation[]

    # Character(position: PVector, direction: int, speed: float, characterName: String)
    + getDirection(): int
    + setDirection(direction: int)
    + getSpeed(): int
    + setSpeed(speed: float)
    # getDirectionVector(int direction)
    + move(map: Map)
    + canMove(map: Map, direction: int): boolean
    + {abstract} decideDirection(stage: Stage)
    + update(map: Map)
    + draw()
}

class Pacman {
    # nextDirection: int

    + Pacman(position: PVector, direction: int, speed: float)
    + setDirection(direction: int)
    + getNextDirection(): int
    + setNextDirection(nextDirection: int)
    + decideDirection(stage: Stage)
}

abstract class Monster {
    # status: MonsterStatus
    # mode: MonsterMode
    # ijikeAnimetions: Animation[]
    # returnAnimetions: Animation[]
    # changeMode: int
    # changeModeLeft: int
    # ijikeTime: int

    # Monster(position: PVector, direction: int, speed: float, characterName: String)
    + getStatus(): MonsterStatus
    + setStatus(status: MonsterStatus)
    + getMode(): MonsterMode
    + setMode(mode: MonsterMode)
    + getIjikeTime(): int
    + setIjikeTime(ijikeTime: int)
    + canMove(map: Map, direction: int): boolean
    # getAimDirection(map: map, point: PVector): int
    + decideDirection(stage: Stage)
    + update(map: Map)
    + draw()
}

enum MonsterStatus {
    Wait
    Release
    Active
    Return
}

enum MonsterMode {
    Rest
    Chase
    Ijike
}

class Akabei {
    + Akabei(position: PVector, direction: int, speed: float)
    + decideDirection(stage: Stage)
}

class Pinky {
    + Pinky(position: PVector, direction: int, speed: float)
    + decideDirection(stage: Stage)
}

class Aosuke {
    + Aosuke(position: PVector, direction: int, speed: float)
    + decideDirection(stage: Stage)
}

class Guzuta {
    + Guzuta(position: PVector, direction: int, speed: float)
    + decideDirection(stage: Stage)
}

class Map {
    # objects: MapObject[][]
    # pacmanStartPosition: PVector
    # monsterStartPositions: ArrayList<PVector>
    # releasePoint: PVector
    # returnPoint: PVector
    # image: PImage
    # size: PVector

    + Map(mapName: String)
    + getPacmanStartPosition(): PVector
    + geMonsterStartPosition(index: int): PVector
    + getReleasePoint(): PVector
    + getReturnPoint(): PVector
    + getSize(): PVector
    + getObject(x: float, y: float): MapObject
    + draw()
}

enum MapObject {
    Wall
    Route
    MonsterDoor
}

class Item {
    # animation: Animation

    + Item(position: PVector, imageName: String)
    + update()
    + draw()
}

class Animation {
    # images: PImage[]
    # cur: int
    # number: int
    # interval: int
    # intervalLeft: int

    + Animation(imageName:: String)
    + update(): boolean
    + getImage(): PImage
    + getSize(): PVector
}

interface Scene {
    + {abstract} update(): void
    + {abstract} draw(): void
}

class SceneMaganer {
    # {static} scene: Scene

    + {static} setScene(scene: Scene): void
    + {static} update(): void
    + {static} draw(): void
}

class Stage {
    # pacman: Pacman
    # monsters: ArrayList<Monster>
    # foods: ArrayList<Item>
    # powerFoods: ArrayList<Item>
    # map: Map
    # frame: int
    # score: int
    # monsterEatCount: int
    # life: int

    + Stage(mapName: String)
    + getScore(): int
    + update()
    + draw()
}

class Title {
    + update()
    + draw()
}

class Result {
    # score: int

    + Result(score: int)
    + update()
    + draw()
}

abstract class InputInterface {
    # previewRight: boolean
    # previewLeft: boolean
    # previewUp: boolean
    # previewDown: boolean
    # previewButtonA: boolean
    # previewButtonB: boolean

    + {abstract} right(): boolean
    + {abstract} up(): boolean
    + {abstract} left(): boolean
    + {abstract} down(): boolean
    + {abstract} buttonA(): boolean
    + {abstract} buttonB(): boolean

    + rightPress(): boolean
    + upPress(): boolean
    + leftPress(): boolean
    + downPress(): boolean
    + buttonAPress(): boolean
    + buttonBPress(): boolean

    + rightRelease(): boolean
    + upRelease(): boolean
    + leftRelease(): boolean
    + downRelease(): boolean
    + buttonARelease(): boolean
    + buttonBRelease(): boolean
}

class KeyboardInput {
    + right(): boolean
    + up(): boolean
    + left(): boolean
    + down(): boolean
    + buttonA(): boolean
    + buttonB(): boolean
}

class ArcadeInput {
    + right(): boolean
    + up(): boolean
    + left(): boolean
    + down(): boolean
    + buttonA(): boolean
    + buttonB(): boolean
}

class Input {
    # {static} inputInterface: InputInterface

    + {static} setInputInterface(inputInterFace: InputInterFace): void

    + {static} right(): boolean
    + {static} up(): boolean
    + {static} left(): boolean
    + {static} down(): boolean
    + {static} buttonA(): boolean
    + {static} buttonB(): boolean

    + {static} rightPress(): boolean
    + {static} upPress(): boolean
    + {static} leftPress(): boolean
    + {static} downPress(): boolean
    + {static} buttonAPress(): boolean
    + {static} buttonBPress(): boolean

    + {static} rightRelease(): boolean
    + {static} upRelease(): boolean
    + {static} leftRelease(): boolean
    + {static} downRelease(): boolean
    + {static} buttonARelease(): boolean
    + {static} buttonBRelease(): boolean
}

@enduml
